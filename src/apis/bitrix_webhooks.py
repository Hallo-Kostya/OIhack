import requests
from sqlalchemy import select
from src.config import settings 
from langchain_gigachat.tools.giga_tool import giga_tool
from src.database.session import session_factory, async_session_factory
from src.models.user import WorkStatus
from datetime import datetime

from src.models.user import User
BITRIX_URL=settings.BITRIX24_WEBHOOK_URL

few_shot_examples = [
    {"request": "–í–µ—Ä–Ω–∏ –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ê–ª–µ–∫—Å–∞–Ω–¥—Ä –ö–æ–ª–º–∞–∫–æ–≤", "params":{"name": "–ê–ª–µ–∫—Å–∞–Ω–¥—Ä", "lastname": "–ö–æ–ª–º–∞–∫–æ–≤"}},
    {"request": "–ü–æ–∫–∞–∂–∏-–∫–∞ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –∞–π–¥–∏ 2 –∏–º—è –ø–æ-–º–æ–µ–º—É —É –Ω–µ–≥–æ –ê–ª–µ–∫—Å–∞–Ω–¥—Ä", "params":{"id": 2}}
    ]

def format_users(users: list[dict]) -> list[str]:
    formatted = []
    for user in users:
        name = user.get("NAME", "").strip()
        last_name = user.get("LAST_NAME", "").strip()
        email = user.get("EMAIL", "").strip()
        department_id = user.get("UF_DEPARTMENT", "")
        user_type = user.get("USER_TYPE", "").strip()

        if name or last_name:
            full_name = f"{name} {last_name}".strip()
            formatted.append(f"{full_name} ‚Äî {email}")
        else:
            formatted.append(f"{email}")
        if department_id:
            formatted.append(f"–∏–∑ –æ—Ç–¥–µ–ª–∞ —Å –∞–π–¥–∏ {department_id[0]}")
        formatted.append(f"–†–æ–ª—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞: {user_type}")
    return " ".join(formatted)

@giga_tool(few_shot_examples=few_shot_examples)
def get_bitrix_users(
    active: str = None,
    email: str = None,
    name: str = None,
    lastname: str = None,
    id: int = None,
    department_id: int = None,
    admin: str = None,
    sort: str = "ID",
    order: str = "ASC",
) -> list:
    
    """
    –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –∏–∑ –±–∏—Ç—Ä–∏–∫—Å–∞ —Å –∏—Ö –¥–∞–Ω–Ω—ã–º–∏. –õ–∏–±–æ –ø–æ–ª—É—á–∏—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –µ—Å–ª–∏ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –ø–µ—Ä–µ–¥–∞–Ω

    :param active: 'Y' –∏–ª–∏ 'N' ‚Äî –∞–∫—Ç–∏–≤–µ–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    :param email: —Ñ–∏–ª—å—Ç—Ä –ø–æ email
    :param name: —Ñ–∏–ª—å—Ç—Ä –ø–æ –∏–º–µ–Ω–∏
    :param lastname: —Ñ–∏–ª—å—Ç—Ä –ø–æ —Ñ–∞–º–∏–ª–∏–∏
    :param id: –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    :param department_id: ID –æ—Ç–¥–µ–ª–∞ (–¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞ –ø–æ –æ—Ç–¥–µ–ª—É)
    :param admin: 'Y' –∏–ª–∏ 'N' ‚Äî –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä
    :param sort: –ø–æ–ª–µ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "ID", "LAST_NAME")
    :param order: –ø–æ—Ä—è–¥–æ–∫ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ ("ASC" –∏–ª–∏ "DESC")
    :return: —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    """

    url = f"{BITRIX_URL}/user.get"

    # –°–±–æ—Ä–∫–∞ —Ñ–∏–ª—å—Ç—Ä–æ–≤
    filters = {}
    if active:
        filters["ACTIVE"] = active
    if email:
        filters["EMAIL"] = email
    if name:
        filters["NAME"] = name
    if lastname:
        filters["LAST_NAME"] = lastname
    if id:
        filters["ID"] = id
    if department_id:
        filters["UF_DEPARTMENT"] = department_id
    if admin:
        filters["IS_ADMIN"] = admin

    payload = {
        "FILTER": filters,
        "SORT": sort,
        "ORDER": order
    }
    print("üîç –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è Bitrix:", payload)
    response = requests.post(url, json=payload)
    data = response.json()

    if "error" in data:
        raise Exception(f"Bitrix error: {data['error_description']}")
    data = data["result"]
    workers = format_users(data)
    print(workers)
    return workers